name: Release image

on:
  push:
#    branches: [ master ]

jobs:
  unit-test:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100
      - name: Install dependencies
        run: dotnet restore --nologo
      - name: Build
        run: |
          dotnet build --configuration Release --no-restore --nologo | tee ./log.txt
          grep '0 Warning(s)' ./log.txt
      - name: Test
        run: dotnet test --no-restore --nologo

  push-image:
    needs: unit-test
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build image
        run: |
          echo "${{ github.token }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
          docker buildx build --push \
            --platform linux/amd64,linux/arm64 \
            --tag ghcr.io/ghosts-network/content:latest .

          docker run --rm --entrypoint "" ghcr.io/ghosts-network/content:latest cat swagger.json > swagger.json

      - name: Build version
        run: |
          export CURRENT_BUILD_VERSION=$(grep -o '"version": "[^"]*' swagger.json | grep -o '[^"]*$' | awk -F "." '{print $1"."$2}')
          export LATEST_PUBLISHED_VERSION=$(curl https://api.nuget.org/v3-flatcontainer/GhostNetwork.Content/index.json | jq ".versions | last" | sed 's/\"//g' | awk -F "." '{print $1"."$2}')
          export $HIGHEST_VERSION=$(printf "$CURRENT_BUILD_VERSION\n$LATEST_PUBLISHED_VERSION" | sort -V | tail -1)
          echo "CURRENT_BUILD_VERSION=$CURRENT_BUILD_VERSION" >> $GITHUB_ENV
          echo "LATEST_PUBLISHED_VERSION=$LATEST_PUBLISHED_VERSION" >> $GITHUB_ENV
          echo "HIGHEST_VERSION=$HIGHEST_VERSION" >> $GITHUB_ENV
          
  generate-sdk:
    needs: push-image
    runs-on: ubuntu-20.04

    steps:
      - name: test
        run: |
          echo ${{ env.CURRENT_BUILD_VERSION }}
          echo ${{ env.LATEST_PUBLISHED_VERSION }}
          echo ${{ env.HIGHEST_VERSION }}
