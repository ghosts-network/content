name: Release stable version

on:
  push:
    tags:
      - 'v*.*.*'

jobs:

  unit-test:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100
      - name: Install dependencies
        run: dotnet restore --nologo
      - name: Build
        run: |
          dotnet build --configuration Release --no-restore --nologo | tee ./log.txt
          grep '0 Warning(s)' ./log.txt
      - name: Test
        run: dotnet test --no-restore --nologo

  push-image:
    needs: unit-test
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build image
        run: |
          echo "${{ github.token }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
          docker buildx build --push \
            --platform linux/amd64,linux/arm64 \
            --tag ghcr.io/ghosts-network/content:$(echo "${{ github.ref_name }}" | sed 's/v//g')
            --tag ghcr.io/ghosts-network/content:latest .

  generate-dotnet-sdk:
    needs: push-image
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100

      - name: Build version
        run: |
          export CURRENT_BUILD_VERSION=$(echo "${{ github.ref_name }}" | sed 's/v//g' | awk -F "." '{print $1"."$2}')
          export LATEST_PUBLISHED_VERSION=$(curl https://api.nuget.org/v3-flatcontainer/GhostNetwork.Content/index.json | jq ".versions | last" | sed 's/\"//g' | awk -F "." '{print $1"."$2}')
          export HIGHEST_VERSION=$(printf "$CURRENT_BUILD_VERSION\n$LATEST_PUBLISHED_VERSION" | sort -V | tail -1)
          echo "CURRENT_BUILD_VERSION=$CURRENT_BUILD_VERSION" >> $GITHUB_ENV
          echo "LATEST_PUBLISHED_VERSION=$LATEST_PUBLISHED_VERSION" >> $GITHUB_ENV
          echo "HIGHEST_VERSION=$HIGHEST_VERSION" >> $GITHUB_ENV

      - name: Generate swagger
        if: ${{ env.LATEST_PUBLISHED_VERSION != env.HIGHEST_VERSION }}
        run: |
          dotnet restore --nologo
          dotnet build --configuration Release --no-restore --nologo -o ./app
          dotnet new tool-manifest --force
          dotnet tool install Swashbuckle.AspNetCore.Cli --version 6.4.0
          dotnet swagger tofile --output swagger.json ./app/GhostNetwork.Content.Api.dll api

      - name: Generate source code
        if: ${{ env.LATEST_PUBLISHED_VERSION != env.HIGHEST_VERSION }}
        run: |
          npm install @openapitools/openapi-generator-cli
          npx @openapitools/openapi-generator-cli generate -i swagger.json \
            -g csharp-netcore \
            -o ./http-client \
            --library httpclient \
            --remove-operation-id-prefix \
            --additional-properties=packageName=GhostNetwork.Content \
            --additional-properties=netCoreProjectFile=true

      - name: Create package
        if: ${{ env.LATEST_PUBLISHED_VERSION != env.HIGHEST_VERSION }}
        run: dotnet pack -p:PackageVersion=$HIGHEST_VERSION -o .
        working-directory: ./http-client

      - name: Publish package
        if: ${{ env.LATEST_PUBLISHED_VERSION != env.HIGHEST_VERSION }}
        run: |
          dotnet nuget push GhostNetwork.Content.$HIGHEST_VERSION.0.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_KEY }}
        working-directory: ./http-client
